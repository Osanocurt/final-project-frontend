{"version":3,"sources":["js/app.js","controllers/auth.js","controllers/feedback.js","models/feedback.js","js/directives/googleMap.js","controllers/main.js","controllers/request.js","models/request.js","js/router.js","controllers/user.js","models/user.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","id","getPayload","FeedbacksNewController","Feedback","createFeedback","console","log","feedbacksNew","feedback","save","isLoggedIn","isAuthenticated","FeedbacksIndexController","feedbacksIndex","all","query","FeedbacksShowController","isCurrentFeedback","parseFloat","params","feedbacksShow","get","$resource","update","method","googleMap","$window","restrict","replace","template","scope","center","link","$scope","element","map","google","maps","Map","zoom","Marker","position","animation","Animation","DROP","MainController","$rootScope","logout","secureState","e","toState","toParams","protectedStates","includes","name","preventDefault","main","message","$on","RequestsNewController","Request","createRequest","requestsNew","request","RequestsIndexController","accept","$accept","reload","decline","$decline","requestsIndex","RequestsShowController","isCurrentRequest","requestsShow","url","Router","$stateProvider","$urlRouterProvider","state","templateUrl","controller","otherwise","UsersIndexController","User","usersIndex","UsersShowController","deleteUser","usersShow","$remove","isRunner","user_type","isCustomer","delete","UsersEditController","usersEdit","$update","angular","module","constant","config","$inject","factory","directive"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersShow', {id: $auth.getPayload().id});\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('FeedbacksIndexController', FeedbacksIndexController)\n  .controller('FeedbacksNewController', FeedbacksNewController)\n  .controller('FeedbacksShowController', FeedbacksShowController);\n\n\nFeedbacksNewController.$inject = ['Feedback', '$state', '$auth'];\nfunction FeedbacksNewController(Feedback, $state, $auth) {\n  const feedbacksNew = this;\n  feedbacksNew.feedback = {};\n\n  function createFeedback() {\n    console.log('Going to try to save: ', feedbacksNew.feedback);\n    Feedback.save(feedbacksNew.feedback);\n    $state.go('feedbacksIndex');\n\n  }\n  feedbacksNew.createFeedback = createFeedback;\n  feedbacksNew.isLoggedIn = $auth.isAuthenticated;\n}\n\nFeedbacksIndexController.$inject = ['Feedback'];\nfunction FeedbacksIndexController(Feedback) {\n  const feedbacksIndex = this;\n\n  feedbacksIndex.all = Feedback.query();\n}\n\nFeedbacksShowController.$inject = ['Feedback', '$state', '$auth'];\nfunction FeedbacksShowController(Feedback, $state, $auth) {\n  const feedbacksShow = this;\n  feedbacksShow.feedback = Feedback.get($state.params);\n\n\n  feedbacksShow.isLoggedIn = $auth.isAuthenticated;\n\n  function isCurrentFeedback() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n  feedbacksShow.isCurrentFeedback = isCurrentFeedback;\n}\n","angular.module('finalProject')\n  .factory('Feedback', Feedback);\n\nFeedback.$inject = ['$resource', 'API_URL'];\nfunction Feedback($resource, API_URL) {\n  return new $resource(`${API_URL}/feedbacks/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window'];\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      center: '='\n    },\n    link: function($scope, element) {\n      const map = new $window.google.maps.Map(element[0], {\n        center: $scope.center,\n        zoom: 14\n      });\n\n      new $window.google.maps.Marker({\n        position: $scope.center,\n        map: map,\n        animation: $window.google.maps.Animation.DROP\n      });\n    }\n  };\n}\n","angular\n  .module('finalProject')\n  .controller('MainController', MainController);\n\n\nMainController.$inject = ['$auth','$state','$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('login');\n    });\n\n  }\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState, toParams) {\n\n    if((!$auth.isAuthenticated() &&\n      protectedStates.includes(toState.name)) ||\n      toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('login');\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n\n}\n","angular.module('finalProject')\n  .controller('RequestsIndexController', RequestsIndexController)\n  .controller('RequestsNewController', RequestsNewController)\n  .controller('RequestsShowController', RequestsShowController);\n\n\n\nRequestsNewController.$inject = ['Request', '$state', '$auth'];\nfunction RequestsNewController(Request, $state, $auth) {\n  const requestsNew = this;\n  requestsNew.request = {};\n\n  function createRequest() {\n    console.log('bang bang bang');\n    console.log('Going to try to save: ', requestsNew.request);\n    Request.save(requestsNew.request);\n    $state.go('requestsIndex');\n  }\n  requestsNew.createRequest = createRequest;\n  requestsNew.isLoggedIn = $auth.isAuthenticated;\n}\n\nRequestsIndexController.$inject = ['Request', '$state'];\nfunction RequestsIndexController(Request, $state) {\n  const requestsIndex = this;\n\n  requestsIndex.all = Request.query();\n\n  function accept(request) {\n    request.$accept(() => {\n      $state.reload();\n    });\n  }\n  requestsIndex.accept = accept;\n\n  function decline(request) {\n    request.$decline(() => {\n      $state.reload();\n    });\n  }\n  requestsIndex.decline = decline;\n\n}\n\nRequestsShowController.$inject = ['Request', '$state', '$auth'];\nfunction RequestsShowController(Request, $state, $auth) {\n  const requestsShow = this;\n  requestsShow.request = Request.get($state.params);\n\n\n  requestsShow.isLoggedIn = $auth.isAuthenticated;\n\n  function isCurrentRequest() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n  requestsShow.isCurrentRequest = isCurrentRequest;\n}\n","angular.module('finalProject')\n  .factory('Request', Request);\n\nRequest.$inject = ['$resource', 'API_URL'];\nfunction Request($resource, API_URL) {\n  return new $resource(`${API_URL}/requests/:id`, { id: '@id' }, {\n    update: { method: 'PUT' },\n    accept: { method: 'POST', url: `${API_URL}/requests/:id/accept` },\n    decline: { method: 'POST', url: `${API_URL}/requests/:id/decline` }\n  });\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('usersShow', {\n      url: '/profile',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('feedbacksIndex', {\n      url: '/feedbacks',\n      templateUrl: '/templates/feedbacksIndex.html',\n      controller: 'FeedbacksIndexController as feedbacksIndex'\n    })\n    .state('feedbacksNew', {\n      url: '/feedbacks/new',\n      templateUrl: '/templates/feedbacksNew.html',\n      controller: 'FeedbacksNewController as feedbacksNew'\n    })\n    .state('feedbacksShow', {\n      url: '/feedbacks/:id',\n      templateUrl: '/templates/feedbacksShow.html',\n      controller: 'FeedbacksShowController as feedbacksShow'\n    })\n    .state('requestsIndex', {\n      url: '/requests',\n      templateUrl: '/templates/requestsIndex.html',\n      controller: 'RequestsIndexController as requestsIndex'\n    })\n    .state('requestsNew', {\n      url: '/requests/new',\n      templateUrl: '/templates/requestsNew.html',\n      controller: 'RequestsNewController as requestsNew'\n    })\n    .state('requestsShow', {\n      url: '/requests/:id',\n      templateUrl: '/templates/requestsShow.html',\n      controller: 'RequestsShowController as requestsShow'\n    })\n    .state('track', {\n      url: '/track',\n      templateUrl: '/templates/track.html'\n    })\n    .state('map', {\n      url: '/map',\n      templateUrl: '/templates/map.html'\n    });\n  $urlRouterProvider.otherwise('/login');\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n  User.get({ id: $auth.getPayload().id }, (user) => {\n    usersShow.user = user;\n\n    console.log(user);\n\n    usersShow.isRunner = user.user_type === 'Runner';\n    usersShow.isCustomer = user.user_type === 'Customer';\n  });\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  this.update = update;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n"]}