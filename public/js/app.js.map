{"version":3,"sources":["js/app.js","controllers/auth.js","controllers/feedback.js","models/feedback.js","controllers/main.js","controllers/request.js","models/request.js","js/router.js","models/user.js","controllers/user.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","FeedbacksNewController","Feedback","createFeedback","console","log","feedbacksNew","feedback","save","isLoggedIn","isAuthenticated","FeedbacksIndexController","feedbacksIndex","all","query","FeedbacksShowController","isCurrentFeedback","getPayload","id","parseFloat","params","feedbacksShow","get","$resource","update","method","MainController","$rootScope","logout","secureState","e","toState","toParams","protectedStates","includes","name","preventDefault","main","message","$on","RequestsNewController","Request","createRequest","requestsNew","request","RequestsIndexController","requestsIndex","RequestsShowController","isCurrentRequest","requestsShow","accept","url","decline","Router","$stateProvider","$urlRouterProvider","state","templateUrl","controller","otherwise","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","$remove","isCurrentUser","delete","UsersEditController","usersEdit","$update","angular","module","constant","config","$inject","factory"],"mappings":"YAKA,SAASA,MAAKC,EAAeC,GAC3BD,EAAcE,SAAcD,EAA5B,SACAD,EAAcG,UAAeF,EAA7B,YAEAD,EAAcI,YAAc,GCH9B,QAASC,oBAAmBC,EAAOC,GAKjC,QAASC,KACPF,EAAMG,OAAOC,EAASC,MACnBC,KAAK,WACJL,EAAOM,GAAG,WAPhB,GAAMH,GAAWI,IAEjBJ,GAASC,QASTD,EAASF,OAASA,EAIpB,QAASO,iBAAgBT,EAAOC,GAK9B,QAASC,KACPF,EAAMU,MAAMA,EAAMC,aACfL,KAAK,WACJL,EAAOM,GAAG,gBAPhB,GAAMG,GAAQF,IAEdE,GAAMC,eASND,EAAMR,OAASA,EC3BjB,QAASU,wBAAuBC,EAAUZ,EAAQD,GAIhD,QAASc,KACPC,QAAQC,IAAI,yBAA0BC,EAAaC,UACnDL,EAASM,KAAKF,EAAaC,UAC3BjB,EAAOM,GAAG,kBANZ,GAAMU,GAAeT,IACrBS,GAAaC,YAQbD,EAAaH,eAAiBA,EAC9BG,EAAaG,WAAapB,EAAMqB,gBAIlC,QAASC,0BAAyBT,GAChC,GAAMU,GAAiBf,IAEvBe,GAAeC,IAAMX,EAASY,QAIhC,QAASC,yBAAwBb,EAAUZ,EAAQD,GAOjD,QAAS2B,KACP,MAAO3B,GAAM4B,aAAaC,KAAOC,WAAW7B,EAAO8B,OAAOF,IAP5D,GAAMG,GAAgBxB,IACtBwB,GAAcd,SAAWL,EAASoB,IAAIhC,EAAO8B,QAG7CC,EAAcZ,WAAapB,EAAMqB,gBAMjCW,EAAcL,kBAAoBA,ECpCpC,QAASd,UAASqB,EAAWvC,GAC3B,MAAO,IAAIuC,GAAavC,EAAjB,kBAA4CkC,GAAI,QACrDM,QAAUC,OAAQ,SCCtB,QAASC,gBAAerC,EAAOC,EAAQqC,GAOrC,QAASC,KACPvC,EAAMuC,SACLjC,KAAK,WACJL,EAAOM,GAAG,gBAMd,QAASiC,GAAYC,EAAGC,EAASC,KAE1B3C,EAAMqB,mBACTuB,EAAgBC,SAASH,EAAQI,OAChB,cAAjBJ,EAAQI,MAAyBhB,WAAWa,EAASd,MAAQ7B,EAAM4B,aAAaC,MAChFY,EAAEM,iBACF9C,EAAOM,GAAG,UArBd,GAAMyC,GAAOxC,IAGbwC,GAAK5B,WAAapB,EAAMqB,gBACxB2B,EAAKC,QAAU,IASf,IAAML,IAAmB,YAWzBN,GAAWY,IAAI,oBAAqBV,GAEpCQ,EAAKT,OAASA,EC1BhB,QAASY,uBAAsBC,EAASnD,EAAQD,GAI9C,QAASqD,KACPtC,QAAQC,IAAI,kBACZD,QAAQC,IAAI,yBAA0BsC,EAAYC,SAClDH,EAAQjC,KAAKmC,EAAYC,SACzBtD,EAAOM,GAAG,iBAPZ,GAAM+C,GAAc9C,IACpB8C,GAAYC,WAQZD,EAAYD,cAAgBA,EAC5BC,EAAYlC,WAAapB,EAAMqB,gBAIjC,QAASmC,yBAAwBJ,GAC/B,GAAMK,GAAgBjD,IAEtBiD,GAAcjC,IAAM4B,EAAQ3B,QAK9B,QAASiC,wBAAuBN,EAASnD,EAAQD,GAO/C,QAAS2D,KACP,MAAO3D,GAAM4B,aAAaC,KAAOC,WAAW7B,EAAO8B,OAAOF,IAP5D,GAAM+B,GAAepD,IACrBoD,GAAaL,QAAUH,EAAQnB,IAAIhC,EAAO8B,QAG1C6B,EAAaxC,WAAapB,EAAMqB,gBAMhCuC,EAAaD,iBAAmBA,ECtClC,QAASP,SAAQlB,EAAWvC,GAC1B,MAAO,IAAIuC,GAAavC,EAAjB,iBAA2CkC,GAAI,QACpDM,QAAUC,OAAQ,OAClByB,QAAUzB,OAAQ,OAAQ0B,IAAQnE,EAAR,wBAC1BoE,SAAW3B,OAAQ,OAAQ0B,IAAQnE,EAAR,2BCJ/B,QAASqE,QAAOC,EAAgBC,GAC9BD,EACGE,MAAM,cACLL,IAAK,SACLM,YAAa,6BACbC,WAAY,uCAEbF,MAAM,YACLL,IAAK,YACLM,YAAa,2BACbC,WAAY,mCAEbF,MAAM,SACLL,IAAK,SACLM,YAAa,wBACbC,WAAY,6BAEbF,MAAM,aACLL,IAAK,aACLM,YAAa,4BACbC,WAAY,qCAEbF,MAAM,aACLL,IAAK,kBACLM,YAAa,4BACbC,WAAY,qCAEbF,MAAM,kBACLL,IAAK,aACLM,YAAa,iCACbC,WAAY,+CAEbF,MAAM,gBACLL,IAAK,iBACLM,YAAa,+BACbC,WAAY,2CAEbF,MAAM,iBACLL,IAAK,iBACLM,YAAa,gCACbC,WAAY,6CAEbF,MAAM,iBACLL,IAAK,YACLM,YAAa,gCACbC,WAAY,6CAEbF,MAAM,eACLL,IAAK,gBACLM,YAAa,8BACbC,WAAY,yCAEbF,MAAM,gBACLL,IAAK,gBACLM,YAAa,+BACbC,WAAY,2CAEbF,MAAM,QACLL,IAAK,QACLM,YAAa,yBAGjBF,EAAmBI,UAAU,UC9D/B,QAASC,MAAKrC,EAAWvC,GACvB,MAAO,IAAIuC,GAAavC,EAAjB,cAAwCkC,GAAI,QACjDM,QAAUC,OAAQ,SCCtB,QAASoC,sBAAqBD,GAC5B,GAAME,GAAajE,IAEnBiE,GAAWjD,IAAM+C,EAAK9C,QAMxB,QAASiD,qBAAoBH,EAAMtE,EAAQD,GAIzC,QAAS2E,KACPC,EAAUvE,KAAKwE,QAAQ,WACrB5E,EAAOM,GAAG,gBAMd,QAASuE,KACP,MAAO9E,GAAM4B,aAAaC,KAAOC,WAAW7B,EAAO8B,OAAOF,IAZ5D,GAAM+C,GAAYpE,IAClBoE,GAAUvE,KAAOkE,EAAKtC,IAAIhC,EAAO8B,QAOjC6C,EAAUG,OAASJ,EACnBC,EAAUxD,WAAapB,EAAMqB,gBAM7BuD,EAAUE,cAAgBA,EAI5B,QAASE,qBAAoBT,EAAMtE,GAIjC,QAASkC,KACP8C,EAAU5E,KAAK6E,QAAQ,WACrBjF,EAAOM,GAAG,YAAaN,EAAO8B,UALlC,GAAMkD,GAAYzE,IAClByE,GAAU5E,KAAOkE,EAAKtC,IAAIhC,EAAO8B,QAOjCvB,KAAK2B,OAASA,ET7ChBgD,QAAQC,OAAO,gBAAiB,aAAc,YAAa,eACxDC,SAAS,UAAW,6BACpBC,OAAO7F,MAEVA,KAAK8F,SAAW,gBAAiB,WCJjCJ,QAAQC,OAAO,gBACZf,WAAW,qBAAsBtE,oBACjCsE,WAAW,kBAAmB5D,iBAGjCV,mBAAmBwF,SAAW,QAAS,UAgBvC9E,gBAAgB8E,SAAW,QAAS,UCrBpCJ,QAAQC,OAAO,gBACZf,WAAW,2BAA4B/C,0BACvC+C,WAAW,yBAA0BzD,wBACrCyD,WAAW,0BAA2B3C,yBAGzCd,uBAAuB2E,SAAW,WAAY,SAAU,SAexDjE,yBAAyBiE,SAAW,YAOpC7D,wBAAwB6D,SAAW,WAAY,SAAU,SC5BzDJ,QAAQC,OAAO,gBACZI,QAAQ,WAAY3E,UAEvBA,SAAS0E,SAAW,YAAa,WCHjCJ,QACGC,OAAO,gBACPf,WAAW,iBAAkBhC,gBAIhCA,eAAekD,SAAW,QAAQ,SAAS,cCN3CJ,QAAQC,OAAO,gBACZf,WAAW,0BAA2Bb,yBACtCa,WAAW,wBAAyBlB,uBACpCkB,WAAW,yBAA0BX,wBAIxCP,sBAAsBoC,SAAW,UAAW,SAAU,SAetD/B,wBAAwB+B,SAAW,WAQnC7B,uBAAuB6B,SAAW,UAAW,SAAU,SC9BvDJ,QAAQC,OAAO,gBACZI,QAAQ,UAAWpC,SAEtBA,QAAQmC,SAAW,YAAa,WCHhCJ,QAAQC,OAAO,gBACZE,OAAOtB,QAEVA,OAAOuB,SAAW,iBAAkB,sBCHpCJ,QAAQC,OAAO,gBACZI,QAAQ,OAAQjB,MAEnBA,KAAKgB,SAAW,YAAa,WCH7BJ,QAAQC,OAAO,gBACZf,WAAW,uBAAwBG,sBACnCH,WAAW,sBAAuBK,qBAClCL,WAAW,sBAAuBW,qBAGrCR,qBAAqBe,SAAW,QAShCb,oBAAoBa,SAAW,OAAQ,SAAU,SAoBjDP,oBAAoBO,SAAW,OAAQ","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n  \n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('FeedbacksIndexController', FeedbacksIndexController)\n  .controller('FeedbacksNewController', FeedbacksNewController)\n  .controller('FeedbacksShowController', FeedbacksShowController);\n\n\nFeedbacksNewController.$inject = ['Feedback', '$state', '$auth'];\nfunction FeedbacksNewController(Feedback, $state, $auth) {\n  const feedbacksNew = this;\n  feedbacksNew.feedback = {};\n\n  function createFeedback() {\n    console.log('Going to try to save: ', feedbacksNew.feedback);\n    Feedback.save(feedbacksNew.feedback);\n    $state.go('feedbacksIndex');\n\n  }\n  feedbacksNew.createFeedback = createFeedback;\n  feedbacksNew.isLoggedIn = $auth.isAuthenticated;\n}\n\nFeedbacksIndexController.$inject = ['Feedback'];\nfunction FeedbacksIndexController(Feedback) {\n  const feedbacksIndex = this;\n\n  feedbacksIndex.all = Feedback.query();\n}\n\nFeedbacksShowController.$inject = ['Feedback', '$state', '$auth'];\nfunction FeedbacksShowController(Feedback, $state, $auth) {\n  const feedbacksShow = this;\n  feedbacksShow.feedback = Feedback.get($state.params);\n\n\n  feedbacksShow.isLoggedIn = $auth.isAuthenticated;\n\n  function isCurrentFeedback() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n  feedbacksShow.isCurrentFeedback = isCurrentFeedback;\n}\n","angular.module('finalProject')\n  .factory('Feedback', Feedback);\n\nFeedback.$inject = ['$resource', 'API_URL'];\nfunction Feedback($resource, API_URL) {\n  return new $resource(`${API_URL}/feedbacks/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular\n  .module('finalProject')\n  .controller('MainController', MainController);\n\n\n\nMainController.$inject = ['$auth','$state','$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n\n  }\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState, toParams) {\n\n    if((!$auth.isAuthenticated() &&\n      protectedStates.includes(toState.name)) ||\n      toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('login');\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n\n}\n","angular.module('finalProject')\n  .controller('RequestsIndexController', RequestsIndexController)\n  .controller('RequestsNewController', RequestsNewController)\n  .controller('RequestsShowController', RequestsShowController);\n\n\n\nRequestsNewController.$inject = ['Request', '$state', '$auth'];\nfunction RequestsNewController(Request, $state, $auth) {\n  const requestsNew = this;\n  requestsNew.request = {};\n\n  function createRequest() {\n    console.log('bang bang bang');\n    console.log('Going to try to save: ', requestsNew.request);\n    Request.save(requestsNew.request);\n    $state.go('requestsIndex');\n  }\n  requestsNew.createRequest = createRequest;\n  requestsNew.isLoggedIn = $auth.isAuthenticated;\n}\n\nRequestsIndexController.$inject = ['Request'];\nfunction RequestsIndexController(Request) {\n  const requestsIndex = this;\n\n  requestsIndex.all = Request.query();\n}\n\n\nRequestsShowController.$inject = ['Request', '$state', '$auth'];\nfunction RequestsShowController(Request, $state, $auth) {\n  const requestsShow = this;\n  requestsShow.request = Request.get($state.params);\n\n\n  requestsShow.isLoggedIn = $auth.isAuthenticated;\n\n  function isCurrentRequest() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n  requestsShow.isCurrentRequest = isCurrentRequest;\n}\n","angular.module('finalProject')\n  .factory('Request', Request);\n\nRequest.$inject = ['$resource', 'API_URL'];\nfunction Request($resource, API_URL) {\n  return new $resource(`${API_URL}/requests/:id`, { id: '@id' }, {\n    update: { method: 'PUT' },\n    accept: { method: 'POST', url: `${API_URL}/requests/:id/accept` },\n    decline: { method: 'POST', url: `${API_URL}/requests/:id/decline` }\n  });\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('feedbacksIndex', {\n      url: '/feedbacks',\n      templateUrl: '/templates/feedbacksIndex.html',\n      controller: 'FeedbacksIndexController as feedbacksIndex'\n    })\n    .state('feedbacksNew', {\n      url: '/feedbacks/new',\n      templateUrl: '/templates/feedbacksNew.html',\n      controller: 'FeedbacksNewController as feedbacksNew'\n    })\n    .state('feedbacksShow', {\n      url: '/feedbacks/:id',\n      templateUrl: '/templates/feedbacksShow.html',\n      controller: 'FeedbacksShowController as feedbacksShow'\n    })\n    .state('requestsIndex', {\n      url: '/requests',\n      templateUrl: '/templates/requestsIndex.html',\n      controller: 'RequestsIndexController as requestsIndex'\n    })\n    .state('requestsNew', {\n      url: '/requests/new',\n      templateUrl: '/templates/requestsNew.html',\n      controller: 'RequestsNewController as requestsNew'\n    })\n    .state('requestsShow', {\n      url: '/requests/:id',\n      templateUrl: '/templates/requestsShow.html',\n      controller: 'RequestsShowController as requestsShow'\n    })\n    .state('home', {\n      url: '/home',\n      templateUrl: '/templates/home.html'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\n\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n  usersShow.isCurrentUser = isCurrentUser;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  this.update = update;\n}\n"]}