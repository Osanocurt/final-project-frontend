{"version":3,"sources":["js/app.js","controllers/auth.js","controllers/feedback.js","models/feedback.js","controllers/main.js","controllers/request.js","models/request.js","js/router.js","controllers/user.js","models/user.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","FeedbacksIndexController","Feedback","feedbacksIndex","all","query","FeedbacksShowController","isCurrentFeedback","getPayload","id","parseFloat","params","feedbacksShow","feedback","get","isLoggedIn","isAuthenticated","$resource","update","method","MainController","$rootScope","logout","secureState","e","toState","toParams","protectedStates","includes","name","preventDefault","main","message","$on","RequestsNewController","Request","createRequest","save","requestsNew","request","RequestsIndexController","requestsIndex","RequestsShowController","isCurrentRequest","requestsShow","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","UsersIndexController","User","usersIndex","UsersShowController","deleteUser","usersShow","$remove","isCurrentUser","delete","UsersEditController","usersEdit","$update","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n  \n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('FeedbacksIndexController', FeedbacksIndexController)\n  // .controller('FeedbacksNewController', FeedbacksNewController)\n  .controller('FeedbacksShowController', FeedbacksShowController);\n\nFeedbacksIndexController.$inject = ['Feedback'];\nfunction FeedbacksIndexController(Feedback) {\n  const feedbacksIndex = this;\n\n  feedbacksIndex.all = Feedback.query();\n}\n\nFeedbacksShowController.$inject = ['Feedback', '$state', '$auth'];\nfunction FeedbacksShowController(Feedback, $state, $auth) {\n  const feedbacksShow = this;\n  feedbacksShow.feedback = Feedback.get($state.params);\n\n\n  feedbacksShow.isLoggedIn = $auth.isAuthenticated;\n\n  function isCurrentFeedback() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n  feedbacksShow.isCurrentFeedback = isCurrentFeedback;\n}\n","angular.module('finalProject')\n  .factory('Feedback', Feedback);\n\nFeedback.$inject = ['$resource', 'API_URL'];\nfunction Feedback($resource, API_URL) {\n  return new $resource(`${API_URL}/feedbacks/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular\n  .module('finalProject')\n  .controller('MainController', MainController);\n\n\nMainController.$inject = ['$auth','$state','$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n\n  }\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState, toParams) {\n\n    if((!$auth.isAuthenticated() &&\n      protectedStates.includes(toState.name)) ||\n      toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('login');\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n\n}\n","angular.module('finalProject')\n  .controller('RequestsIndexController', RequestsIndexController)\n  .controller('RequestsNewController', RequestsNewController)\n  .controller('RequestsShowController', RequestsShowController);\n\n\n\nRequestsNewController.$inject = ['Request', '$state', '$auth'];\nfunction RequestsNewController(Request, $state, $auth) {\n  const requestsNew = this;\n  requestsNew.request = {};\n\n  function createRequest() {\n    Request.save(requestsNew.request);\n  }\n  requestsNew.createRequest = createRequest;\n  requestsNew.isLoggedIn = $auth.isAuthenticated;\n}\n\n\n\nRequestsIndexController.$inject = ['Request'];\nfunction RequestsIndexController(Request) {\n  const requestsIndex = this;\n\n  requestsIndex.all = Request.query();\n}\n\n\nRequestsShowController.$inject = ['Request', '$state', '$auth'];\nfunction RequestsShowController(Request, $state, $auth) {\n  const requestsShow = this;\n  requestsShow.request = Request.get($state.params);\n\n\n  requestsShow.isLoggedIn = $auth.isAuthenticated;\n\n  function isCurrentRequest() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n  requestsShow.isCurrentRequest = isCurrentRequest;\n}\n","angular.module('finalProject')\n  .factory('Request', Request);\n\nRequest.$inject = ['$resource', 'API_URL'];\nfunction Request($resource, API_URL) {\n  return new $resource(`${API_URL}/requests/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('feedbacksIndex', {\n      url: '/feedbacks',\n      templateUrl: '/templates/feedbacksIndex.html',\n      controller: 'FeedbacksIndexController as feedbacksIndex'\n    })\n    .state('feedbacksNew', {\n      url: '/feedbacks/new',\n      templateUrl: '/templates/feedbacksNew.html',\n      controller: 'FeedbacksNewController as feedbacksNew'\n    })\n    .state('feedbacksShow', {\n      url: '/feedbacks/:id',\n      templateUrl: '/templates/feedbacksShow.html',\n      controller: 'FeedbacksShowController as feedbacksShow'\n    })\n    .state('requestsIndex', {\n      url: '/requests',\n      templateUrl: '/templates/requestsIndex.html',\n      controller: 'RequestsIndexController as requestsIndex'\n    })\n    .state('requestsNew', {\n      url: '/requests/new',\n      templateUrl: '/templates/requestsNew.html',\n      controller: 'RequestsNewController as requestsNew'\n    })\n    .state('requestsShow', {\n      url: '/requests/:id',\n      templateUrl: '/templates/requestsShow.html',\n      controller: 'RequestsShowController as requestsShow'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\n\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n  usersShow.isCurrentUser = isCurrentUser;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  this.update = update;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n"]}